{"version":3,"sources":["components/Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","useState","movieinfo","setMovieinfo","title","setTitle","getMoviedata","fetch","then","response","json","movie","console","log","catch","err","useEffect","className","type","placeholder","onChange","event","value","target","onClick","undefined","Error","src","Poster","alt","Title","Genre","Director","Plot","Actors","BoxOffice","Language","Released","Runtime","Ratings","map","rating","index","Source","Value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA2HgBA,MAxHf,WAEG,MAA6BC,mBAAS,MAAtC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAAqBF,mBAAS,uBAA9B,mBAAKG,EAAL,KAAWC,EAAX,KAsBA,SAASC,IAEJC,MAAM,0BAAD,OAA2BH,EAA3B,qBACLI,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACG,GACHR,EAAaQ,GACbC,QAAQC,IAAI,kBAEfC,OAAM,SAACC,GACJH,QAAQC,IAAIE,MAQpB,OArCAC,qBAAU,WAYNV,MACF,IAyBE,8BACI,sBAAKW,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAf,SACI,gDAEJ,sBAAKA,UAAU,cAAf,UACK,uBAAOC,KAAK,OAAOC,YAAY,mBAAmBC,SAAU,SAACC,GA7B9E,IAAmBC,IA6B8ED,EAAME,OAAOD,MA5B1GjB,EAASiB,GACTV,QAAQC,IAAIS,IA2BuGL,UAAU,iBAChH,wBAAQC,KAAK,SAASD,UAAU,MAAKO,QAASlB,EAA9C,+BAKkBmB,KAAV,OAATvB,QAAS,IAATA,OAAA,EAAAA,EAAWwB,OAInB,sBAAKT,UAAU,QAAf,UAEI,qBAAKA,UAAU,SAAf,SACI,qBAAKU,IAAG,OAAEzB,QAAF,IAAEA,OAAF,EAAEA,EAAW0B,OAAQC,IAAI,SAASZ,UAAU,iBAGxD,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,MAAf,UACI,+BAAI,2CAAJ,WAA4Bf,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAW4B,SACvC,8BAAG,2CAAH,WAA2B5B,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAW6B,SACtC,8BAAG,8CAAH,WAA8B7B,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAW8B,YACzC,8BAAG,0CAAH,WAA0B9B,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAW+B,QACrC,8BAAG,4CAAH,WAA4B/B,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAWgC,UACvC,8BAAG,+CAAH,WAA+BhC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAWiC,aAC1C,8BAAG,8CAAH,WAA8BjC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAWkC,YACzC,8BAAG,+CAAH,WAA+BlC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAWmC,YAC1C,8BAAG,6CAAH,WAA6BnC,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAWoC,cAE5C,qBAAKrB,UAAU,UAAf,gBAIKf,QAJL,IAIKA,OAJL,EAIKA,EAAWqC,QAAQC,KAAI,SAACC,EAAOC,GAAR,OAEpB,gCACA,iCAASD,EAAOE,SAChB,6BAAKF,EAAOG,UAFFF,cA2BvB,uDCrGAG,MATf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f49386b6.chunk.js","sourcesContent":["import{useState, useEffect} from 'react'\n\n\n function Movie(){\n     \n    let [movieinfo,setMovieinfo]=useState(null);\n    let [title,setTitle]=useState('Mission: Impossible');\n    \n    useEffect(()=>{\n        \n        // fetch(url)\n\n        //  fetch(`https://omdbapi.com/?t=${title}&apikey=784a9d41`)\n        // .then((response)=>response.json())\n        // .then((movie)=>{\n        //     setMovieinfo(movie);\n        // })\n        // .catch((err)=>{\n        //     console.log(err)\n        // })\n        getMoviedata()\n    },[])\n\n    function readTitle(value){\n        setTitle(value);\n        console.log(value)\n    }\n\n    function getMoviedata(){\n\n         fetch(`https://omdbapi.com/?t=${title}&apikey=784a9d41`)\n        .then((response)=>response.json())\n        .then((movie)=>{\n            setMovieinfo(movie);\n            console.log('hellloo api')\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n\n    }\n\n   \n\n\n    return(\n        <div>\n            <div className=\"container\">\n                <div className=\"padd\">\n                    <h1>Movie Search</h1>\n                </div>\n                <div className=\"input-group\">\n                     <input type=\"text\" placeholder='Enter Movie Name' onChange={(event)=>{readTitle(event.target.value)}} className='search-field'/>\n                     <button type='button' className='btn'onClick={getMoviedata}>Get Movie</button>\n                </div>\n                {/* //if movie not find this condtion will work */}\n               \n                {\n                    movieinfo?.Error===undefined?(\n                \n\n            // </div>\n            <div className=\"movie\">\n                \n                <div className=\"poster\">\n                    <img src={movieinfo?.Poster} alt=\"poster\" className='img-poster'/>\n\n                </div>\n                <div className=\"details\">\n                    <div className=\"pad\">\n                        <h1><strong>Title</strong> {movieinfo?.Title}</h1>\n                        <p><strong>Genre</strong> {movieinfo?.Genre}</p>\n                        <p><strong>Director</strong> {movieinfo?.Director}</p>\n                        <p><strong>Plot</strong> {movieinfo?.Plot}</p>\n                        <p><strong>Actors</strong> {movieinfo?.Actors}</p>\n                        <p><strong>BoxOffice</strong> {movieinfo?.BoxOffice}</p>\n                        <p><strong>Language</strong> {movieinfo?.Language}</p>\n                        <p><strong>Realeased</strong> {movieinfo?.Released}</p>\n                        <p><strong>Runtime</strong> {movieinfo?.Runtime}</p>\n                    </div>\n                    <div className='ratings'>\n\n\n                        {\n                         movieinfo?.Ratings.map((rating,index)=>(\n\n                            <div key={index}>\n                            <strong>{rating.Source}</strong>\n                            <h3>{rating.Value}</h3>\n\n\n                            </div>\n                         ))\n                        }\n                        {/* <p>\n                            <strong>{movieinfo?.Ratings[0].Source}</strong>\n                            <h3>{movieinfo?.Ratings[0].Value}</h3>\n                        </p>\n                        <p>\n                            <strong>{movieinfo?.Ratings[1].Source}</strong>\n                            <h3>{movieinfo?.Ratings[1].Value}</h3>\n                        </p>\n                        <p>\n                            <strong>{movieinfo?.Ratings[2].Source}</strong>\n                            <h3>{movieinfo?.Ratings[2].Value}</h3>\n                        </p> */}\n                    </div>\n                \n                </div>\n               \n            </div>\n             ):\n             \n            (  <h1>Movie Not Found</h1> )\n            }\n\n            </div>\n\n            \n            \n        </div>\n    )\n }\n export default Movie","import './App.css';\nimport Movie from './components/Movie';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Movie/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}